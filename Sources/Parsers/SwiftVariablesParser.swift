//
//  NatriumConfigSwiftHelper.swift
//  CommandLineKit
//
//  Created by Bas van Kuijck on 20/10/2017.
//

import Foundation
import Yaml
import Francium

class SwiftVariablesParser: Parser {

    let natrium: Natrium
    var isRequired: Bool {
        return true
    }

    var yamlKey: String {
        return "variables"
    }

    required init(natrium: Natrium) {
        self.natrium = natrium
    }

    private let preservedVariableNames = [ "environment", "configuration" ]

    private var template: String {
        return """
        import Foundation

        /// Natrium.Config
        /// Autogenerated by natrium
        ///
        /// - see: https://github.com/e-sites/Natrium

        {%class%} {
            public enum EnvironmentType: {%enumType%} {
        {%environments%}
            }

            public enum ConfigurationType: {%enumType%} {
        {%configurations%}
            }

            public static let environment: EnvironmentType = {%environment%}
            public static let configuration: ConfigurationType = {%configuration%}

        {%customvariables%}
        }

        """
    }

    func parse(_ yaml: [NatriumKey: Yaml]) { // swiftlint:disable:this function_body_length
        let environments = natrium.environments.map {
            return "        case \($0.lowercased()) = \"\($0)\""
        }.joined(separator: "\n")

        let configurations = natrium.configurations.map {
            return "        case \($0.lowercased()) = \"\($0)\""
        }.joined(separator: "\n")

        let customVariables = yaml.map { key, value in
            if preservedVariableNames.contains(key.string) {
                Logger.fatalError("\(key.string) is a reserved variable name")
            }
            let type: String
            var stringValue = value.stringValue
            switch value {
            case .int:
                type = "Int"
            case .double:
                type = "Double"
            case .bool:
                type = "Bool"
            case .null:
                type = "String?"
            default:
                type = "String"
                stringValue = "\"\(value.stringValue)\""
            }
            return "    open static let \(key.string): \(type) = \(stringValue)"
        }.joined(separator: "\n")

        let classInit: String
        let enumType: String
        let className = natrium.settings["class_name"]?.string ?? (isCocoaPods ? "Config" : "NatriumConfig")
        classInit = "open class \(className)"
        enumType = "String"

        var contents = template
        let array: [(String, String)] = [
            ("environments", environments),
            ("environment", ".\(natrium.environment.lowercased())"),
            ("configurations", configurations),
            ("configuration", ".\(natrium.configuration.lowercased())"),
            ("customvariables", customVariables),
            ("class", classInit),
            ("enumType", enumType)
        ]

        for object in array {
            contents = contents.replacingOccurrences(of: "{%\(object.0)%}", with: object.1)
        }

        let currentDirectory = FileManager.default.currentDirectoryPath
        let filePath = "\(currentDirectory)/Config.swift"
        do {
            let file = File(path: filePath)
            if file.isExisting {
                file.chmod(0o7777)
            }
            try file.write(string: contents)
        } catch { }
    }
}
