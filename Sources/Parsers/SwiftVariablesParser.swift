//
//  NatriumConfigSwiftHelper.swift
//  CommandLineKit
//
//  Created by Bas van Kuijck on 20/10/2017.
//

import Foundation
import Yaml

class SwiftVariablesParser: Parser {

    let natrium: Natrium
    var isRequired: Bool {
        return true
    }

    var yamlKey: String {
        return "variables"
    }

    required init(natrium: Natrium) {
        self.natrium = natrium
    }

    private let preservedVariableNames = [ "environment", "configuration" ]

    private var template: String {
        return """
import Foundation

/// Natrium.Config
/// Autogenerated by natrium
///
/// - see: https://github.com/e-sites/Natrium

{%class%} {
{%enumTypeObjcEnvironmentPrefix%}    public enum EnvironmentType: {%enumType%} {
{%environments%}
    }

{%enumTypeObjcConfigurationPrefix%}    public enum ConfigurationType: {%enumType%} {
{%configurations%}
    }

    {%objc%}public static let environment: EnvironmentType = {%environment%}
    {%objc%}public static let configuration: ConfigurationType = {%configuration%}

{%customvariables%}
}

"""
    }

    func parse(_ yaml: [NatriumKey: Yaml]) { // swiftlint:disable:this function_body_length
        let objcSetting = natrium.settings["objective-c"]?.bool == true
        var index = 0
        let environments = natrium.environments.map {
            if objcSetting {
                defer {
                    index += 1
                }
                return "        case \($0.lowercased()) = \(index)"
            } else {
                return "        case \($0.lowercased()) = \"\($0)\""
            }
        }.joined(separator: "\n")

        index = 0
        let configurations = natrium.configurations.map {
            if objcSetting {
                defer {
                    index += 1
                }
                return "        case \($0.lowercased()) = \(index)"
            } else {
                return "        case \($0.lowercased()) = \"\($0)\""
            }
        }.joined(separator: "\n")

        let customVariables = yaml.map { key, value in
            if preservedVariableNames.contains(key.string) {
                Logger.fatalError("\(key.string) is a reserved variable name")
            }
            let type: String
            var stringValue = value.stringValue
            switch value {
            case .int:
                type = "Int"
            case .double:
                type = "Double"
            case .bool:
                type = "Bool"
            case .null:
                type = "String?"
            default:
                type = "String"
                stringValue = "\"\(value.stringValue)\""
            }
            return "    {%objc%}open static let \(key.string): \(type) = \(stringValue)"
        }.joined(separator: "\n")

        let classInit: String
        let enumType: String
        var enumTypeObjcEnvironmentPrefix = ""
        var enumTypeObjcConfigurationPrefix = ""
        var objc = ""
        if objcSetting {
            classInit = "@objc(NatriumConfig)\nopen class Config: NSObject"
            enumType = "Int"
            enumTypeObjcEnvironmentPrefix = "    @objc(NatriumEnvironmentType)\n"
            enumTypeObjcConfigurationPrefix = "    @objc(NatriumConfigurationType)\n"
            objc = "@objc "
        } else {
            classInit = "open class Config"
            enumType = "String"
        }

        var contents = template
        let ar: [(String, String)] = [
            ("environments", environments),
            ("environment", ".\(natrium.environment.lowercased())"),
            ("configurations", configurations),
            ("configuration", ".\(natrium.configuration.lowercased())"),
            ("customvariables", customVariables),
            ("class", classInit),
            ("enumType", enumType),
            ("enumTypeObjcConfigurationPrefix", enumTypeObjcConfigurationPrefix),
            ("enumTypeObjcEnvironmentPrefix", enumTypeObjcEnvironmentPrefix),
            ("objc", objc)
        ]

        for object in ar {
            contents = contents.replacingOccurrences(of: "{%\(object.0)%}", with: object.1)
        }

        let currentDirectory = FileManager.default.currentDirectoryPath
        let filePath = "\(currentDirectory)/Config.swift"
        FileHelper.write(filePath: filePath, contents: contents)
    }
}
